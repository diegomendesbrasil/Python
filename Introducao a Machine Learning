{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Introducao a Machine Learning","provenance":[],"authorship_tag":"ABX9TyOhxEeHYcRkdRpbN//FC2Bs"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"FxIJNwzFG95r","colab_type":"code","colab":{}},"source":["#ML Classificação binária\n","\n","#Dados de treino\n","# Pelo Longo?\n","#Perna Curta?\n","#faz auau?\n","porco1 = [0,1,0]\n","porco2 = [0,1,1]\n","porco3 = [1,1,0]\n","\n","cachorro1 = [0,1,1]\n","cachorro2 = [1,0,1]\n","cachorro3 = [1,1,1]\n","\n","treino_x = [porco1,porco2,porco3,cachorro1,cachorro2,cachorro3]\n","treino_y = [1,1,1,0,0,0] #0 cachorro 1 porco"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"T3cJJkDsJKp2","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":85},"outputId":"9a863e23-824d-462e-c064-166f84c707d5","executionInfo":{"status":"ok","timestamp":1583704594682,"user_tz":180,"elapsed":646,"user":{"displayName":"Diego Mendes Brasil","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiayLQgL4ivejIxRDfEbWcBGcTg39_04TNChwAVpQ=s64","userId":"08545831371646452892"}}},"source":["#entenda isso como um cerebro vazio, estamos treinando esse cerebro\n","from sklearn.svm import LinearSVC\n","\n","modelo = LinearSVC()\n","modelo.fit(treino_x,treino_y)"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinearSVC(C=1.0, class_weight=None, dual=True, fit_intercept=True,\n","          intercept_scaling=1, loss='squared_hinge', max_iter=1000,\n","          multi_class='ovr', penalty='l2', random_state=None, tol=0.0001,\n","          verbose=0)"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"wUwxx-ciJrFq","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"4efe581c-940f-4f33-c13f-74fcdd7b5b91","executionInfo":{"status":"ok","timestamp":1583705178275,"user_tz":180,"elapsed":613,"user":{"displayName":"Diego Mendes Brasil","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiayLQgL4ivejIxRDfEbWcBGcTg39_04TNChwAVpQ=s64","userId":"08545831371646452892"}}},"source":["animal_misterioso = [1,1,0]\n","modelo.predict([animal_misterioso])"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1])"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"nF9q6FmaL075","colab_type":"code","colab":{}},"source":["#novo teste\n","misterioso1 = [1,1,1] #porco\n","misterioso2 = [1,1,0] #cachorro\n","misterioso3 = [0,1,1] #cachorro\n","\n","teste_x = [misterioso1,misterioso2,misterioso3]\n","teste_y = [0,1,1] #porco,cachorro,cachorro\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9aYZFQDFMTHR","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"a3230cfd-7a3c-4ae3-d537-0f6ee3c2218e","executionInfo":{"status":"ok","timestamp":1583705334822,"user_tz":180,"elapsed":619,"user":{"displayName":"Diego Mendes Brasil","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiayLQgL4ivejIxRDfEbWcBGcTg39_04TNChwAVpQ=s64","userId":"08545831371646452892"}}},"source":["previsoes = modelo.predict(teste_x)\n","previsoes"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 1, 0])"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"8VnMXxadMjFh","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"e316846f-19cb-47e0-f56b-66161b21b18e","executionInfo":{"status":"ok","timestamp":1583705745304,"user_tz":180,"elapsed":581,"user":{"displayName":"Diego Mendes Brasil","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiayLQgL4ivejIxRDfEbWcBGcTg39_04TNChwAVpQ=s64","userId":"08545831371646452892"}}},"source":["#verificando a acurácia\n","from sklearn.metrics import accuracy_score\n","accuracy_score(teste_y,previsoes)"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6666666666666666"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"Zvpkpxu1QzMP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":802},"outputId":"b3e9f160-969b-458b-f3c5-66612327a729","executionInfo":{"status":"error","timestamp":1583706501125,"user_tz":180,"elapsed":5397,"user":{"displayName":"Diego Mendes Brasil","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiayLQgL4ivejIxRDfEbWcBGcTg39_04TNChwAVpQ=s64","userId":"08545831371646452892"}}},"source":["# -*- coding: utf-8 -*-\n","\"\"\"Introdução a Data Science.ipynb\n","\n","Automatically generated by Colaboratory.\n","\n","Original file is located at\n","    https://colab.research.google.com/drive/1hz_8SuHtntWMIKSFcMiw6NHef1ngFNl6\n","\"\"\"\n","\n","!pip install seaborn==0.9.0\n","\n","import seaborn as sns\n","print(sns.__version__)\n","\n","\"\"\"# Analisando as notas em geral\"\"\"\n","\n","import pandas as pd\n","\n","notas = pd.read_csv(\"ratings.csv\")\n","notas.head()\n","\n","notas.shape\n","\n","notas.columns = [\"usuarioId\", \"filmeId\", \"nota\", \"momento\"]\n","notas.head()\n","\n","notas['nota'].unique()\n","\n","notas['nota'].value_counts()\n","\n","print(\"Media\",notas['nota'].mean())\n","print(\"Mediana\",notas['nota'].median())\n","\n","notas.nota.head()\n","\n","notas.nota.plot(kind='hist')\n","\n","notas.nota.describe()\n","\n","import seaborn as sns\n","\n","sns.boxplot(notas.nota)\n","\n","\"\"\"# Olhando os filmes\"\"\"\n","\n","filmes = pd.read_csv(\"movies.csv\")\n","filmes.columns = [\"filmeId\", \"titulo\", \"generos\"]\n","filmes.head()\n","\n","notas.head()\n","\n","\"\"\"# Analisando algumas notas especificas por filme\"\"\"\n","\n","notas.query(\"filmeId==1\").nota.mean()\n","\n","notas.query(\"filmeId==2\").nota.mean()\n","\n","medias_por_filme = notas.groupby(\"filmeId\").mean().nota\n","medias_por_filme.head()\n","\n","medias_por_filme.plot(kind='hist')\n","\n","import matplotlib.pyplot as plt\n","\n","plt.figure(figsize=(5,8))\n","sns.boxplot(y=medias_por_filme)\n","\n","medias_por_filme.describe()\n","\n","sns.distplot(medias_por_filme)\n","\n","plt.hist(medias_por_filme)\n","plt.title(\"Histograma das médias dos filmes\")\n","\n","tmdb = pd.read_csv(\"tmdb_5000_movies.csv\")\n","tmdb.head()\n","\n","tmdb.original_language.unique() # categorica nominal\n","\n","# primeiro grau\n","# segundo grau\n","# terceiro grau\n","# 1 grau < 2 grau < 3 grau # categorica ordinal\n","\n","# budget => orcamento => quantitativa continuo\n","\n","# quantidade de votos => 1, 2, 3, 4, nao tem 2.5 votos.\n","# notas do movielens => 0.5, 1, 1.5, ... ,5 nao tem 2.7\n","\n","tmdb[\"original_language\"].value_counts().index\n","\n","tmdb[\"original_language\"].value_counts().values\n","\n","contagem_de_lingua = tmdb[\"original_language\"].value_counts().to_frame().reset_index()\n","contagem_de_lingua.columns = [\"original_language\", \"total\"]\n","contagem_de_lingua.head()\n","\n","sns.barplot(x=\"original_language\", y = \"total\", data = contagem_de_lingua)\n","\n","sns.catplot(x = \"original_language\", kind=\"count\", data = tmdb)\n","\n","plt.pie(contagem_de_lingua[\"total\"], labels = contagem_de_lingua[\"original_language\"])\n","\n","total_por_lingua = tmdb[\"original_language\"].value_counts()\n","total_geral = total_por_lingua.sum()\n","total_de_ingles = total_por_lingua.loc[\"en\"]\n","total_do_resto = total_geral - total_de_ingles\n","print(total_de_ingles, total_do_resto)\n","\n","dados = {\n","    'lingua' : ['ingles','outros'],\n","    'total' : [total_de_ingles, total_do_resto]\n","}\n","dados = pd.DataFrame(dados)\n","sns.barplot(x=\"lingua\", y=\"total\", data = dados)\n","\n","plt.pie(dados[\"total\"], labels = dados[\"lingua\"])\n","\n","total_por_lingua_de_outros_filmes = tmdb.query(\"original_language != 'en'\").original_language.value_counts()\n","total_por_lingua_de_outros_filmes\n","\n","filmes_sem_lingua_original_em_ingles = tmdb.query(\"original_language != 'en'\")\n","\n","sns.catplot(x = \"original_language\", kind=\"count\",\n","              data = filmes_sem_lingua_original_em_ingles)\n","\n","sns.catplot(x = \"original_language\", kind=\"count\",\n","              data = filmes_sem_lingua_original_em_ingles,\n","              aspect = 2,\n","              palette=\"GnBu_d\",\n","              order = total_por_lingua_de_outros_filmes.index)\n","\n","\"\"\"# Revisando o papel da média, mediana, medidas de tendência central, dispersão, desvio padrão, box plot, histograma\"\"\"\n","\n","filmes.head(2)\n","\n","notas_do_toy_story = notas.query(\"filmeId==1\")\n","notas_do_jumanji = notas.query(\"filmeId==2\")\n","print(len(notas_do_toy_story), len(notas_do_jumanji))\n","\n","print(\"Nota média do Toy Story %.2f\" % notas_do_toy_story.nota.mean())\n","print(\"Nota média do Jumanji %.2f\" % notas_do_jumanji.nota.mean())\n","\n","print(notas_do_toy_story.nota.std(), notas_do_jumanji.nota.std())\n","\n","print(\"Nota mediana do Toy Story %.2f\" % notas_do_toy_story.nota.median())\n","print(\"Nota mediana do Jumanji %.2f\" % notas_do_jumanji.nota.median())\n","\n","import numpy as np\n","\n","filme1 = np.append(np.array([2.5] * 10), np.array([3.5] * 10))\n","filme2 = np.append(np.array([5] * 10), np.array([1] * 10))\n","\n","print(filme1.mean(), filme2.mean())\n","print(np.std(filme1), np.std(filme2))\n","print(np.median(filme1), np.median(filme2))\n","\n","plt.hist(filme1)\n","plt.hist(filme2)\n","\n","plt.boxplot([filme1, filme2])\n","\n","\n","\n","plt.boxplot([notas_do_toy_story.nota, notas_do_jumanji.nota])\n","\n","sns.boxplot(x = \"filmeId\", y = \"nota\", data = notas.query(\"filmeId in [1,2,3,4,5]\"))\n"],"execution_count":13,"outputs":[{"output_type":"stream","text":["Collecting seaborn==0.9.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/a8/76/220ba4420459d9c4c9c9587c6ce607bf56c25b3d3d2de62056efe482dadc/seaborn-0.9.0-py3-none-any.whl (208kB)\n","\u001b[K     |████████████████████████████████| 215kB 3.4MB/s \n","\u001b[?25hRequirement already satisfied: scipy>=0.14.0 in /usr/local/lib/python3.6/dist-packages (from seaborn==0.9.0) (1.4.1)\n","Requirement already satisfied: pandas>=0.15.2 in /usr/local/lib/python3.6/dist-packages (from seaborn==0.9.0) (0.25.3)\n","Requirement already satisfied: matplotlib>=1.4.3 in /usr/local/lib/python3.6/dist-packages (from seaborn==0.9.0) (3.1.3)\n","Requirement already satisfied: numpy>=1.9.3 in /usr/local/lib/python3.6/dist-packages (from seaborn==0.9.0) (1.17.5)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas>=0.15.2->seaborn==0.9.0) (2018.9)\n","Requirement already satisfied: python-dateutil>=2.6.1 in /usr/local/lib/python3.6/dist-packages (from pandas>=0.15.2->seaborn==0.9.0) (2.6.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.6/dist-packages (from matplotlib>=1.4.3->seaborn==0.9.0) (0.10.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib>=1.4.3->seaborn==0.9.0) (1.1.0)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib>=1.4.3->seaborn==0.9.0) (2.4.6)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.6/dist-packages (from python-dateutil>=2.6.1->pandas>=0.15.2->seaborn==0.9.0) (1.12.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.6/dist-packages (from kiwisolver>=1.0.1->matplotlib>=1.4.3->seaborn==0.9.0) (45.2.0)\n","Installing collected packages: seaborn\n","  Found existing installation: seaborn 0.10.0\n","    Uninstalling seaborn-0.10.0:\n","      Successfully uninstalled seaborn-0.10.0\n","Successfully installed seaborn-0.9.0\n","0.9.0\n"],"name":"stdout"},{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-ac03b00c730f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m \u001b[0mnotas\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ratings.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0mnotas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36mparser_f\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)\u001b[0m\n\u001b[1;32m    683\u001b[0m         )\n\u001b[1;32m    684\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 685\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    686\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    687\u001b[0m     \u001b[0mparser_f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    455\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    456\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 457\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp_or_buf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    458\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    459\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    893\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 895\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    896\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1133\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"c\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1134\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"c\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1135\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCParserWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1136\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1137\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"python\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   1915\u001b[0m         \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"usecols\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0musecols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1916\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1917\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparsers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1918\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1919\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._setup_parser_source\u001b[0;34m()\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] File b'ratings.csv' does not exist: b'ratings.csv'"]}]}]}